run -> view -> serviceIml -> DAOImpl   member는 가져다쓸수있음
return DAOImpl -> serviceIml ->view ->run
dao. 다오에 넘겨줄게
service. 서비스에서가져온다
➡ service.는 데이터를 받아서 가공하는 역할
➡ dao.는 데이터베이스(DB)에서 데이터를 가져오거나 저장하는 역할

1.Run	프로그램 실행 (main 메서드)
2.View	사용자 입력 및 출력 처리
3.DTO	데이터를 저장하고 이동 
4.Service	비즈니스 로직 처리
5.DAO DB와 직접 연결되어 데이터관리

DTO 값들을 Service 클래스에 객체를 생성할떄
객체 : 객체생성할떄는Service 클래스안에 메서드 생성 후 사용(목적, 가독성)
객체 배열 : Service 클래스안에 바로 필드 선언(메서드 따로 작성X)
 -> 객체 배열은 여러개의 데이터를 위해 공간을 미리 만드는것

얕은 복사: 객체의 "주소"만 복사해서 원본과 복사본이 같은 객체를 참조함
깊은 복사: 새로운 객체를 생성하고, 데이터를 복사해서 원본과 복사본이 독립적인 객체가 됨


상속자(Parent)클래스
getter/stetter
get 메서드 : 접근제어자,자료형,get000
getName()은 "값을 가져오는 역할" (외부에서 호출당함)
setName()은 "값을 설정하는 역할"
setName("새로운값") , setName(name)

getter가 정상적으로 값을 가져오려면 객체 내부나 필드 값이 존재해야 한다.
즉, getter를 사용하려면 반드시 setter를 써야 하는 것은 아니다!

public string toString(){
	return String.format(         );
}

매개변수는 생성자에서 정한 값을 매개변수에 전달하고
this.변수 (인스턴스 변수) 에 전달한다


while은 원하는 값이 나올 때까지 반복
 for는 반복할 회수를 미리 정해놓고 반복


메소드 오버로딩 : 같은 메소드명을 여러번 정의가능 ( 매개변수는 달라야함)
-> 매개변수가 달라야 같은 메소드명으로 사용가능(같은클래스내에서)
public static int add(int a, int b){}
public static int add(int a, int b, int c){}
public static int add(double a, double b){}

static = 클래스변수
private name; 인스턴스변수 ( 메서드안에 값이 정해진 변수)
매개변수(파라미터) = 지역변수

기본생성자 + setter 사용 값 변경가능
매개변수 있는 생성자 -> setter 없음 값 변경 불가능
Home servie = new Service (값) 객체생성시 값 필수

import 패키지끼리 연결

ArrayList : 배열 기반 리스트, 빠른접근 + 순차저장
LinkedList : 연결리스트, 데이터의 빠른 삽입 + 삭제


hashset :  순서, 중복을 허용하지 않는 데이터 집합

HashMap : (Key, Value) 자료구조, 중복X 순서X
lterator : 컬렉션의 모든 데이터 순회(반복자)


다형성 : 부모클래스로 참조할수있다(상속중에)
Person Person = new Person();
Person Student = new Student();
Person.intrduce();
student.intedouce();
-> 객체는 다르지만 부모클래스인 Person으로 참조 가능








